set.seed(123)
index <- sample(seq_len(nrow(insurance)), size = 3)
train <- insurance[-index,]
test <- insurance[index,]
summary(train)
train %>%
tbl_summary(statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n} / {N} ({p}%)"),
type = all_continuous() ~ "continuous2")
cor(insurance)
model <- lm(Charges ~. , data = train)
summary(model)
par(mfrow=c(2,2))
plot(model)
model <- lm(Charges ~. , data = train)
summary(model)
par(mfrow=c(2,2))
plot(model)
View(train)
trainln <- log(train)
View(trainln)
View(trainln)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
par(mfrow=c(1,2))
hist(trainln)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
par(mfrow=c(1,2))
hist(trainln$Charges)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model <- lm(Charges ~. , data = trainln)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model <- lm(Charges ~. , data = trainln)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model <- lm(Charges ~. , data = trainln)
summary(model)
par(mfrow=c(2,2))
plot(model)
cor(trainln)
View(test)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model2 <- lm(Charges ~. , data = trainln)
summary(model)
par(mfrow=c(2,2))
plot(model)
cor(trainln)
model <- lm(Charges ~. , data = train)
summary(model)
par(mfrow=c(2,2))
plot(model)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
# MAE
mae <- function(error_vector){
error_vector %>%
abs() %>%
mean()
}
# Bad Model
mae(test$error_bm)
# Model 1
mae(test$error_1)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
# MAE
mae <- function(error_vector){
error_vector %>%
abs() %>%
mean()
}
# Bad Model
mae(test$error_bm)
# Model 1
mae(test$error_1)
rmse <- function(error_vector){
error_vector^2 %>%
mean() %>%
sqrt()
}
# Bad Model
rmse(test$error_bm)
# Model 1
rmse(test$error_1)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model2 <- lm(Charges ~. , data = trainln)
summary(model2)
par(mfrow=c(2,2))
plot(model)
trainquad <- trainln^2
trainquad <- do.call(data.frame, lapply(trainquad, function(x) replace (x, is.infinite(x), 1)))
model3 <- lm(Charges ~. , data = trainquad)
summary(model3)
par(mfrow=c(2,2))
plot(model)
View(trainquad)
View(trainquad)
trainquad <- trainln^2
trainquad <- do.call(data.frame, lapply(trainquad, function(x) replace (x, is.infinite(x), 1)))
model3 <- lm(Charges ~. , data = trainquad)
summary(model3)
par(mfrow=c(2,2))
plot(model3)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model2 <- lm(Charges ~. , data = trainln)
summary(model2)
par(mfrow=c(2,2))
plot(model2)
trainln <- log(train)
trainln <- do.call(data.frame, lapply(trainln, function(x) replace (x, is.infinite(x), 1)))
model2 <- lm(Charges ~. , data = trainln)
summary(model2)
par(mfrow=c(2,2))
plot(model2)
cor(trainln)
cor(trainquad)
test$Charges <- log(test$Charges)
test$Age <- log(test$Age)
test$BMI <- log(test$BMI)
test$bad_model_pred <- predict(model, newdata = test)
test$model_1_pred <- predict(model2, newdata = test) %>% exp()
test$model_2_pred <- predict(model3,newdata = test) %>% exp()
test$error_bm <- test$bad_model_pred - test$Charges
test$error_1 <- test$model_1_pred - test$Charges
test$error_2 <- test$model_2_pred - test$Charges
# Bad Model
mean(test$error_bm)
# Model 1
mean(test$error_1)
# Model 2
mean(test$error_2)
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
knitr::opts_chunk$set(echo = TRUE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
gt(head(insurance))
set.seed(123)
index <- sample(seq_len(nrow(insurance)), size = 3)
train <- insurance[-index,]
test <- insurance[index,]
summary(train)
train %>%
tbl_summary(statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n} / {N} ({p}%)"),
type = all_continuous() ~ "continuous2")
cor(insurance)
vif(original_model)
set.seed(123)
index <- sample(seq_len(nrow(insurance)), size = 3)
train <- insurance[-index,]
test <- insurance[index,]
summary(train)
train %>%
tbl_summary(statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n} / {N} ({p}%)"),
type = all_continuous() ~ "continuous2")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
gt(head(insurance))
set.seed(123)
index <- sample(seq_len(nrow(insurance)), size = 3)
train <- insurance[-index,]
test <- insurance[index,]
summary(train)
train %>%
tbl_summary(statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n} / {N} ({p}%)"),
type = all_continuous() ~ "continuous2")
cor(insurance)
vif(original_model)
cor(insurance)
original_model <- lm(Charges ~., data = train[,c(1:9)] ) #pulling only original data column before data transformation
summary(original_model)
par(mfrow=c(2,2))
plot(original_model)
vif(original_model)
View(trainln)
View(trainln)
View(trainln)
View(trainln)
View(train)
View(train)
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
gt(head(insurance))
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
gt(head(insurance))
set.seed(123)
index <- sample(seq_len(nrow(insurance)), size = 3)
train <- insurance[-index,]
test <- insurance[index,]
summary(train)
train %>%
tbl_summary(statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n} / {N} ({p}%)"),
type = all_continuous() ~ "continuous2")
cor(insurance)
original_model <- lm(Charges ~., data = train[,c(1:9)] ) #pulling only original data column before data transformation
summary(original_model)
par(mfrow=c(2,2))
plot(original_model)
vif(original_model)
#to detect non-linear relationships and non-normally distributed variables
scatterplotMatrix(train[,c(1,2,3,5)])
#Data Transformation
#taking natural logarithm of Charges to bring possible outliers closer
par(mfrow=c(1,2))
hist(train$Charges) #before
train$lnCharges <- log(train$Charges)
hist(train$lnCharges) #after
#Plotting the relationships After Transformation
scatterplotMatrix(train[,c(10,2,3)]) # grabbing lnCharges
#to determine if the relationship between Charges and Age is logarithmic or quadratic.
train$lnAge <- log(train$Age)
train$AgeSquared <- train$Age^2
scatterplotMatrix(train[,c(10,11,3)]) # lnChares & lnAge
scatterplotMatrix(train[,c(10,12,3)]) # lnChares & AgeSquared
# New Regression
# Models to look at the regression coefficients.
# Model 1lnAge: Age with a logaritmic shape
model_1lnAge <- lm(lnCharges ~., data = train[,c(10,11,3:9)] )
summary(model_1lnAge)
# or
tbl_regression(model_lnAge,
estimate_fun =  ~style_sigfig(.x, digits = 4)) %>% as_gt() %>%
gt::tab_source_note(gt::md(paste0("Adjusted R-Squared: ",round(summary(model_lnAge)$adj.r.squared* 100,digits = 2),"%")))
# New Regression
# Models to look at the regression coefficients.
# Model 1lnAge: Age with a logaritmic shape
model_1lnAge <- lm(lnCharges ~., data = train[,c(10,11,3:9)] )
summary(model_1lnAge)
# or
tbl_regression(model_lnAge,
estimate_fun =  ~style_sigfig(.x, digits = 4)) %>% as_gt() %>%
gt::tab_source_note(gt::md(paste0("Adjusted R-Squared: ",round(summary(model_lnAge)$adj.r.squared* 100,digits = 2),"%")))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(readxl)
sessionInfo()
mail <- read_excel("../Data/First Class Mail.xlsx")
plot(mail$PopUSA, mail$FirstClVol,
main = "Scatterplot of Population and First Class Mail",
xlab = "Population",
ylab = "Mail Volume")
newPrediction <- data.frame(PopUSA = 300)
predict(model_1,
newdata = newPrediction,
interval = "confidence",
level = .8)
model_1 <- lm(FirstClVol ~ PopUSA, data = mail)
model_1
newPrediction <- data.frame(PopUSA = 300)
predict(model_1,
newdata = newPrediction,
interval = "confidence",
level = .8)
model_1$coefficients[2]*10
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
model_1$coefficients[2]*10
model_1$coefficients[2]*10
ts_model$coefficients[2]*.25
ts_model <- lm(FirstClVol ~ Time, data = mail)
summary(ts_model)
newForecast <- data.frame(Time = 62)
predict(ts_model,newdata = newForecast)
ts_model$coefficients[2]*.25
original_model_1$coefficients[2]*10
original_model$coefficients[2]*.25
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
library(readxl)
library(dplyr)
library(gt)
library(gtsummary)
library(car) # for vif function
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
insurance <- read.csv("../Data/insurance_0126_Group6.csv")
gt(head(insurance))
cor(insurance)
original_model <- lm(Charges ~., data = train[,c(1:9)] ) #pulling only original data column before data transformation
summary(original_model)
par(mfrow=c(2,2))
plot(original_model)
vif(original_model)
#to detect non-linear realtionships and non-normally distributed variables
scatterplotMatrix(train[,c(1,2,3,5)])
#Data Transformation
#taking natural logirthm of Charges to bring possible outliers closer
par(mfrow=c(1,2))
hist(train$Charges) #before
train$lnCharges <- log(train$Charges)
hist(train$lnCharges) #after
#Plotting the relationships After Transformation
scatterplotMatrix(train[,c(10,2,3)]) # grabbing lnCharges
#to determine if the relationship between Charges and Age is logarithmic or quadratic.
train$lnAge <- log(train$Age)
train$AgeSquared <- train$Age^2
scatterplotMatrix(train[,c(10,11,3)]) # lnChares & lnAge
scatterplotMatrix(train[,c(10,12,3)]) # lnChares & AgeSquared
# New Regression
# Models to look at the regression coefficients.
# Model 1lnAge: Age with a logaritmic shape
model_1lnAge <- lm(lnCharges ~., data = train[,c(10,11,3:9)] )
summary(model_1lnAge)
# or
tbl_regression(model_lnAge,
estimate_fun =  ~style_sigfig(.x, digits = 4)) %>% as_gt() %>%
gt::tab_source_note(gt::md(paste0("Adjusted R-Squared: ",round(summary(model_lnAge)$adj.r.squared* 100,digits = 2),"%")))
# Model 2AgeSq:Quadratic Relationship between Age and Charges
model_2AgeSq <- lm(lnCharges ~., data = train[,c(10,3:9,12)] )
summary(model_2AgeSq)
# or
tbl_regression(model_2AgeSq,
estimate_fun =  ~style_sigfig(.x, digits = 4)) %>% as_gt() %>%
gt::tab_source_note(gt::md(paste0("Adjusted R-Squared: ",round(summary(model_2AgeSq)$adj.r.squared* 100,digits = 2),"%")))
par(mfrow=c(2,2))
plot(model_2AgeSq)
test$lnCharges <- log(test$Charges)
test$lnAge <- log(test$Age)
test$AgeSquared <- test$Age^2
test$original_model_pred <- predict(original_model, newdata = test)
test$model_1lnAge_pred <- predict(model_1lnAge,newdata = test) %>% exp()
test$model_2AgeSq_pred <- predict(model_2AgeSq,newdata = test) %>% exp()
test$lnCharges <- log(test$Charges)
test$lnAge <- log(test$Age)
test$AgeSquared <- test$Age^2
test$original_model_pred <- predict(original_model, newdata = test)
test$model_1lnAge_pred <- predict(model_1lnAge,newdata = test) %>% exp()
test$model_2AgeSq_pred <- predict(model_2AgeSq,newdata = test) %>% exp()
# Finding the error
test$error_OM <- test$original_model_pred - test$Charges
test$error_1ln<- test$model_1lnAge_pred - test$Charges
test$error_2Sq<- test$model_2AgeSq_pred - test$Charges
# what does it do??? where to look for the output? **** Ask prof?
# Bias
# Original Model
mean(test$error_OM)
# Model 1ln
mean(test$error_1ln)
# Model 2Sq
mean(test$error_2Sq)
# MAE
mae <- function(error_vector){
error_vector %>%
abs() %>%
mean()}
# Original Model
mae(test$error_OM)
# Model 1ln
mae(test$error_1ln)
# Model 2Sq
mae(test$error_2Sq)
### RMSE
rmse <- function(error_vector){
error_vector^2 %>%
mean() %>%
sqrt()}
# Original Model
rmse(test$error_OM)
# Model 1ln
rmse(test$error_1ln)
# Model 2Sq
rmse(test$error_2Sq)
### MAPE
mape <- function(error_vector, actual_vector){
(error_vector/actual_vector) %>%
abs() %>%
mean()
}
# Original Model
mape(test$error_OM, test$Charges)
# Model 1ln
mape(test$error_1ln, test$Charges)
# Model 2Sq
mape(test$error_2Sq, test$Charges)
original_model$coefficients[2]*.25
